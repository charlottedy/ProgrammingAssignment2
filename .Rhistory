display.brewer.all()
plotVolBar = function(dat=datajan13) {
a = nrow(subset(dat,dat$Q31a==1))
b = nrow(subset(dat,dat$Q31b==1))
c = nrow(subset(dat,dat$Q31d==1))
d = nrow(subset(dat,dat$Q31e==1))
e = nrow(subset(dat,dat$Q31f==1))
f = nrow(subset(dat,dat$Q31g==1))
ntot = nrow(dat)
Percentage = c(a,b,c,d,e,f)/ntot*100
lbls <- c("Religion-based groups", "Race-based or dialect-based groups", "Charities",
"Groups promoting a cause", "Educational institutions","Grassroots")
d = data.frame(lbls,Percentage)
p <- ggplot(d,aes(x=lbls,y=Percentage))
p <- p + geom_bar(stat="identity")
p <- p + theme(panel.background=element_blank(),axis.ticks.x=element_blank(),legend.title=element_blank(),axis.title.x=element_blank())
p <- p + theme(axis.text.x = element_text(angle = 45, hjust = 1))
p <- p + scale_fill_manual(values = brewer.pal(6,"Purples"))
return(p)
}
plotVolBar = function(dat=datajan13) {
a = nrow(subset(dat,dat$Q31a==1))
b = nrow(subset(dat,dat$Q31b==1))
c = nrow(subset(dat,dat$Q31d==1))
d = nrow(subset(dat,dat$Q31e==1))
e = nrow(subset(dat,dat$Q31f==1))
f = nrow(subset(dat,dat$Q31g==1))
ntot = nrow(dat$Q31==1)
Percentage = c(a,b,c,d,e,f)/ntot*100
lbls <- c("Religion-based groups", "Race-based or dialect-based groups", "Charities",
"Groups promoting a cause", "Educational institutions","Grassroots")
d = data.frame(lbls,Percentage)
p <- ggplot(d,aes(x=lbls,y=Percentage))
p <- p + geom_bar(stat="identity")
p <- p + theme(panel.background=element_blank(),axis.ticks.x=element_blank(),legend.title=element_blank(),axis.title.x=element_blank())
p <- p + theme(axis.text.x = element_text(angle = 45, hjust = 1))
p <- p + scale_fill_manual(values = brewer.pal(6,"Purples"))
return(p)
}
plotVolBar()
plotVolBar = function(dat=datajan13) {
a = nrow(subset(dat,dat$Q31a==1))
b = nrow(subset(dat,dat$Q31b==1))
c = nrow(subset(dat,dat$Q31d==1))
d = nrow(subset(dat,dat$Q31e==1))
e = nrow(subset(dat,dat$Q31f==1))
f = nrow(subset(dat,dat$Q31g==1))
ntot = nrow(subset(dat,dat$Q31==1))
Percentage = c(a,b,c,d,e,f)/ntot*100
lbls <- c("Religion-based groups", "Race-based or dialect-based groups", "Charities",
"Groups promoting a cause", "Educational institutions","Grassroots")
d = data.frame(lbls,Percentage)
p <- ggplot(d,aes(x=lbls,y=Percentage))
p <- p + geom_bar(stat="identity")
p <- p + theme(panel.background=element_blank(),axis.ticks.x=element_blank(),legend.title=element_blank(),axis.title.x=element_blank())
p <- p + theme(axis.text.x = element_text(angle = 45, hjust = 1))
p <- p + scale_fill_manual(values = brewer.pal(6,"Purples"))
return(p)
}
plotVolBar()
plotVolBar = function(dat=datajan13) {
a = nrow(subset(dat,dat$Q31a==1))
b = nrow(subset(dat,dat$Q31b==1))
c = nrow(subset(dat,dat$Q31d==1))
d = nrow(subset(dat,dat$Q31e==1))
e = nrow(subset(dat,dat$Q31f==1))
f = nrow(subset(dat,dat$Q31g==1))
ntot = nrow(subset(dat,dat$Q31==1))
Percentage = c(a,b,c,d,e,f)/ntot*100
lbls <- c("Religion-based groups", "Race-based or dialect-based groups", "Charities",
"Groups promoting a cause", "Educational institutions","Grassroots")
d = data.frame(lbls,Percentage)
p <- ggplot(d,aes(x=lbls,y=Percentage))
p <- p + geom_bar(stat="identity")
p <- p + theme(panel.background=element_blank(),axis.ticks.x=element_blank(),legend.title=element_blank(),axis.title.x=element_blank())
p <- p + theme(axis.text.x = element_text(angle = 45, hjust = 1))
p <- p + scale_fill_manual(values=c("red","orange","yellow","green","blue","violet"))
return(p)
}
plotVolBar()
plotVolBar = function(dat=datajan13) {
a = nrow(subset(dat,dat$Q31a==1))
b = nrow(subset(dat,dat$Q31b==1))
c = nrow(subset(dat,dat$Q31d==1))
d = nrow(subset(dat,dat$Q31e==1))
e = nrow(subset(dat,dat$Q31f==1))
f = nrow(subset(dat,dat$Q31g==1))
ntot = nrow(subset(dat,dat$Q31==1))
Percentage = c(a,b,c,d,e,f)/ntot*100
lbls <- c("Religion-based groups", "Race-based or dialect-based groups", "Charities",
"Groups promoting a cause", "Educational institutions","Grassroots")
d = data.frame(lbls,Percentage)
p <- ggplot(d,aes(x=lbls,y=Percentage))
p <- p + geom_bar()
p <- p + theme(panel.background=element_blank(),axis.ticks.x=element_blank(),legend.title=element_blank(),axis.title.x=element_blank())
p <- p + theme(axis.text.x = element_text(angle = 45, hjust = 1))
p <- p + scale_fill_manual(values=c("red","orange","yellow","green","blue","violet"))
return(p)
}
plotVolBar()
plotVolBar = function(dat=datajan13) {
a = nrow(subset(dat,dat$Q31a==1))
b = nrow(subset(dat,dat$Q31b==1))
c = nrow(subset(dat,dat$Q31d==1))
d = nrow(subset(dat,dat$Q31e==1))
e = nrow(subset(dat,dat$Q31f==1))
f = nrow(subset(dat,dat$Q31g==1))
ntot = nrow(subset(dat,dat$Q31==1))
Percentage = c(a,b,c,d,e,f)/ntot*100
lbls <- c("Religion-based groups", "Race-based or dialect-based groups", "Charities",
"Groups promoting a cause", "Educational institutions","Grassroots")
d = data.frame(lbls,Percentage)
p <- ggplot(d,aes(x=lbls,y=Percentage,color=c("red","orange","yellow","green","blue","violet")))
p <- p + geom_bar(stat="identity")
p <- p + theme(panel.background=element_blank(),axis.ticks.x=element_blank(),legend.title=element_blank(),axis.title.x=element_blank())
p <- p + theme(axis.text.x = element_text(angle = 45, hjust = 1))
return(p)
}
plotVolBar()
plotVolBar = function(dat=datajan13) {
a = nrow(subset(dat,dat$Q31a==1))
b = nrow(subset(dat,dat$Q31b==1))
c = nrow(subset(dat,dat$Q31d==1))
d = nrow(subset(dat,dat$Q31e==1))
e = nrow(subset(dat,dat$Q31f==1))
f = nrow(subset(dat,dat$Q31g==1))
ntot = nrow(subset(dat,dat$Q31==1))
Percentage = c(a,b,c,d,e,f)/ntot*100
lbls <- c("Religion-based groups", "Race-based or dialect-based groups", "Charities",
"Groups promoting a cause", "Educational institutions","Grassroots")
d = data.frame(lbls,Percentage)
p <- ggplot(d,aes(x=lbls,y=Percentage,color=c("red","orange","yellow","green","blue","violet")))
p <- p + geom_bar(stat="identity")
p <- p + theme(panel.background=element_blank(),axis.ticks.x=element_blank(),legend.title=element_blank(),axis.title.x=element_blank())
p <- p + theme(axis.text.x = element_text(angle = 45, hjust = 1))
p <- p + scale_colour_identity()
return(p)
}
plotVolBar()
plotVolBar = function(dat=datajan13) {
a = nrow(subset(dat,dat$Q31a==1))
b = nrow(subset(dat,dat$Q31b==1))
c = nrow(subset(dat,dat$Q31d==1))
d = nrow(subset(dat,dat$Q31e==1))
e = nrow(subset(dat,dat$Q31f==1))
f = nrow(subset(dat,dat$Q31g==1))
ntot = nrow(subset(dat,dat$Q31==1))
Percentage = c(a,b,c,d,e,f)/ntot*100
lbls <- c("Religion-based groups", "Race-based or dialect-based groups", "Charities",
"Groups promoting a cause", "Educational institutions","Grassroots")
d = data.frame(lbls,Percentage)
p <- ggplot(d,aes(x=lbls,y=Percentage,color=c("red","orange","yellow","green","blue","violet")))
p <- p + geom_bar(stat="identity")
p <- p + theme(panel.background=element_blank(),axis.ticks.x=element_blank(),legend.title=element_blank(),axis.title.x=element_blank())
p <- p + theme(axis.text.x = element_text(angle = 45, hjust = 1))
p <- p + scale_fill_identity()
return(p)
}
plotVolBar()
plotVolBar = function(dat=datajan13) {
a = nrow(subset(dat,dat$Q31a==1))
b = nrow(subset(dat,dat$Q31b==1))
c = nrow(subset(dat,dat$Q31d==1))
d = nrow(subset(dat,dat$Q31e==1))
e = nrow(subset(dat,dat$Q31f==1))
f = nrow(subset(dat,dat$Q31g==1))
ntot = nrow(subset(dat,dat$Q31==1))
Percentage = c(a,b,c,d,e,f)/ntot*100
lbls <- c("Religion-based groups", "Race-based or dialect-based groups", "Charities",
"Groups promoting a cause", "Educational institutions","Grassroots")
d = data.frame(lbls,Percentage)
p <- ggplot(d,aes(x=factor(lbls),y=Percentage),fill=factor(lbls))
p <- p + geom_bar(stat="identity")
p <- p + theme(panel.background=element_blank(),axis.ticks.x=element_blank(),legend.title=element_blank(),axis.title.x=element_blank())
p <- p + theme(axis.text.x = element_text(angle = 45, hjust = 1))
p <- p + scale_fill_manual(values=c("red","orange","yellow","green","blue","violet"))
return(p)
}
plotVolBar()
load("/Volumes/NO NAME/R Code/Workspace.RData")
meanVecQ36j1
getMeanVecQ36j1 = function(dat,list) {
n = length(list)
vec = c()
for (i in 1:n) {
vec[i] = mean5yrs(subset(dat,dat$subMTZ==list[i])$Q36j1)
}
return(vec)
}
meanVecQ36j1=cbind(getMeanVecQ36j1(data,subMTZinfo$subMTZs))
meanQn = function(qn) {
mean = mean(qn[qn<=10])
return(mean)
}
meanSd = function(qn) {
mean = mean(qn[qn<=10])
sd = sd(qn[qn<=10])
combine = c(mean,sd)
return(combine)
}
# 0=worse,1=same,2=better
mean5yrs = function(qn) {
mean = mean(qn[!is.na(qn) & qn<=3])
adjust = c(3-mean)
return(adjust)
}
meanSd5yrs = function(qn) {
mean = mean(qn[!is.na(qn) & qn<=3])
sd = sd(qn[qn<=3])
combine = c(3-mean,sd)
return(combine)
}
meanVecQ36j1=cbind(getMeanVecQ36j1(data,subMTZinfo$subMTZs))
getMeanVecQ36k1 = function(dat,list) {
n = length(list)
vec = c()
for (i in 1:n) {
vec[i] = mean5yrs(subset(dat,dat$subMTZ==list[i])$Q36k1)
}
return(vec)
}
meanVecQ36k1=cbind(getMeanVecQ36k1(data,subMTZinfo$subMTZs))
meanVecQ36k1
cbind(meanVecQ36k1[1:72])
save.image("/Volumes/NO NAME/R Code/Workspace.RData")
mean(dataOrig$Q36j[dataOrig$Q36j<11])
mean(dataOrig$Q36k[dataOrig$Q36k<11])
mean(dataOrig$Q36j1[!is.na(dataOrig$Q36j1) & dataOrig$Q36j1<11])
3-mean(dataOrig$Q36j1[!is.na(dataOrig$Q36j1) & dataOrig$Q36j1<11])
3-mean(dataOrig$Q36k1[!is.na(dataOrig$Q36k1) & dataOrig$Q36k1<11])
addS100SCPop = function(dat,S100dat) {
S100SCdat = subset(S100dat,S100dat$S2!=3)
n=nrow(dat)
vec=rep(0,n)
origVec=dat$subMTZs
compVec=S100dat$subMTZ
for (i in 1:n) {
vec[i]=sum(compVec==origVec[i])
}
dat$S100SCPop=vec
return(dat)
}
subMTZinfo = addS100SCPop(subMTZinfo,data)
head(subMTZinfo)
addS100Pop = function(dat,S100dat) {
n=nrow(dat)
vec=rep(0,n)
origVec=dat$subMTZs
compVec=S100dat$subMTZ
for (i in 1:n) {
vec[i]=sum(compVec==origVec[i])
}
dat$S100Pop=vec
return(dat)
}
subMTZinfo = addS100Pop(subMTZinfo,data)
sum(data$subMTZ==subMTZs[1])
addS100SCPop = function(dat,S100dat) {
S100SCdat = subset(S100dat,S100dat$S2!=3)
n=nrow(dat)
vec=rep(0,n)
origVec=dat$subMTZs
compVec=S100SCdat$subMTZ
for (i in 1:n) {
vec[i]=sum(compVec==origVec[i])
}
dat$S100SCPop=vec
return(dat)
}
subMTZinfo = addS100SCPop(subMTZinfo,data)
head(subMTZinfo)
subMTZinfo
subMTZinfo[1:72,]
dataSC=subset(data,dataS2!=3)
dataSC=subset(data,data$S2!=3)
getMeanVecQ36j = function(dat,list) {
n = length(list)
vec = c()
for (i in 1:n) {
vec[i] = meanQn(subset(dat,dat$subMTZ==list[i])$Q36j)
}
return(vec)
}
meanVecQ36jSC=cbind(getMeanVecQ36j(dataSC,subMTZinfo$subMTZs))
meanVecQ36j
meanVecQ36jSC
cbind(meanVecQ36jSC[1:72])
meanQn(data$Q36j)
meanQn(data$Q36k)
mean5yrs(data$Q36j1)
mean5yrs(data$Q36k1)
meanQn(dataSC$Q36j)
meanQn(dataSC$Q36k)
mean5yrs(dataSC$Q36j1)
mean5yrs(dataSC$Q36k1)
meanVecQ36kSC=cbind(getMeanVecQ36k(dataSC,subMTZinfo$subMTZs))
getMeanVecQ36k = function(dat,list) {
n = length(list)
vec = c()
for (i in 1:n) {
vec[i] = meanQn(subset(dat,dat$subMTZ==list[i])$Q36k)
}
return(vec)
}
meanVecQ36kSC=cbind(getMeanVecQ36k(dataSC,subMTZinfo$subMTZs))
meanVecQ36kSC
cbind(meanVecQ36kSC[1:72])
meanVecQ36j1SC=cbind(getMeanVecQ36j1(dataSC,subMTZinfo$subMTZs))
meanVecQ36j1SC
cbind(meanVecQ36j1SC[1:72])
meanVecQ36k1SC=cbind(getMeanVecQ36k1(dataSC,subMTZinfo$subMTZs))
meanVecQ36k1SC
cbind(meanVecQ36k1SC[1:72])
meanVecQ36k1=cbind(getMeanVecQ36k1(data,subMTZinfo$subMTZs))
meanVecQ36j1=cbind(getMeanVecQ36j1(data,subMTZinfo$subMTZs))
meanVecQ36k=cbind(getMeanVecQ36k(data,subMTZinfo$subMTZs))
meanVecQ36j=cbind(getMeanVecQ36j(data,subMTZinfo$subMTZs))
save.image("/Volumes/NO NAME/1409 - NPTD/R Code/Workspace.RData")
load("~/Desktop/1410 - Subjective Poverty/R Code/Workspace.RData")
11.0/(11.0+13.5+13.4+17.1+11.2)
c(11,13.5,13.4,17.1,11.2)/(11.0+13.5+13.4+17.1+11.2)
round(c(11,13.5,13.4,17.1,11.2)/(11.0+13.5+13.4+17.1+11.2)*100,3)
round(c(11,13.5,13.4,17.1,11.2)/(11.0+13.5+13.4+17.1+11.2)*100,1)
plotDetailedGeneralSentiments(q1=data$Q103d,legend=TRUE)
par(mfcol=c(1,1))
par(mar=c(5,4,4,2))
library(ggplot2)
library(scales)
library(reshape2)
library(rms)
library(RColorBrewer)
library(grid)
plotDetailedGeneralSentiments(q1=data$Q103d,legend=TRUE)
getDetailedCategoryCount2(data$Q103d)
getDetailedCategoryCount2(data,data$Q103d)
getDetailedCategoryCount2(data,data$Q103d)/sum(getDetailedCategoryCount2(data,data$Q103d))
getDetailedCategoryCount2(data,data$Q103d)/sum(nrow(data))
getDetailedCategoryCount2(data,data$Q103d)/sum(getDetailedCategoryCount2(data,data$Q103d))
round(getDetailedCategoryCount2(data,data$Q103d)/sum(getDetailedCategoryCount2(data,data$Q103d))*100,1)
par(mfcol=c(1,1))
par(mar=c(5,4,4,2))
library(ggplot2)
library(scales)
library(reshape2)
library(rms)
library(RColorBrewer)
library(grid)
nrow(subset(data,data$Q103l==0 | data$Q103l==1))
nrow(subset(data,data$Q103l==0 | data$Q103l==1))/nrow(data)
nrow(subset(data,data$Q103m==0 | data$Q103m==1))/nrow(data)
nrow(subset(data,data$Q103k>=0 & data$Q103k<=1))/nrow(data)
nrow(subset(data,data$Q103k>=0 & data$Q103k<=4))/nrow(data)
rnorm
?rnorm
help.search(rnorm)
help.search("rnorm")
?rnorm
args(rnorm)
args("rnorm")
library("RColorBrewer", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
detach("package:RColorBrewer", unload=TRUE)
library(RColorBrewer)
install.packages("slidify")
source("http://bioconductor.org/biocLite.R")
biocLite()
library(ggplot2)
search()
library(slidify)
library(grid)
search()
find.packages("devtools")
install.packages("devtools")
install.packages("slidify")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("kernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
install.packages("swirl")
library(swirl)
swirl()
bye()
swirl()
?set.seed
library(datasets)
data(iris)
?iris
head(iris)
mean(iris$Sepal.Length[iris$Species="virginica"])
iris$Species
mean(iris$Sepal.Length[iris$Species=virginica])
mean(iris$Sepal.Length[iris$Species==virginica])
mean(iris$Sepal.Length[iris$Species=="virginica"])
iris$Species=="virginica"
virgin = subset(iris,iris$Species=="virginica")
mean(virgin$Sepal.Length)
apply(iris, 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
head(iris)
apply(iris, 2, mean)
rowMeans(iris[, 1:4])
library(datasets)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)[3]-tapply(mtcars$hp, mtcars$cyl, mean)[1]
209-82
209.21429-82.63636
ls(virgin)
debug(ls)
ls(virgin)
esc
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
mean(virgin$Sepal.Length)
mean(iris$Sepal.Length[iris$Species=="virginica"])
mean(iris$Sepal.Length[iris$Species=="virginica"])
ls(pos)
library(datasets)
data(iris)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
head(mtcars)
set.seed(1)
rpois(5, 2)
set.seed(2)
rpois(5, 2)
set.seed(2)
rpois(5, 2)
?set.seed
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
y = c(1:10)
x1 = c(2:11)
x2 = c(3:12)
Rprof()
> fit <- lm(y ~ x1 + x2)
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
y
x1
## This pair of functions caches the inverse of a matrix via a special "matrix"
## object
## The first function creates a special "matrix" object that can cache its
## inverse. The special "matrix" object is  a list containing functions to:
## (1) set the matrix
## (2) get the matrix
## (3) set the inverse of the matrix
## (4) get the inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
# Initialise a null variable to contain the inverse
inv <- NULL
# Function to set the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
# Function to get the matrix
get <- function() x
# Function to set the inverse of the matrix
setInverse <- function(inverse) inv <<- inverse
# Function to get the inverse of the matrix
getInverse <- function() inv
# Putting all the functions together in a list
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## The second function returns a matrix that is the inverse of special
## "matrix" created with the first function. First, it checks if the inverse
## has already been calculated. If yes, it gets the inverse from the cache
## and skips the computation. Otherwise, it calculates the inverse of the
## matrix and sets the inverse in the cache via the setInverse function.
cacheSolve <- function(x, ...) {
# Try to get the inverse of the matrix from the cache
inv <- x$getInverse()
# If there is an inverse in the cache, return it (without doing computation)
if(!is.null(inv)) {
# Print a message saying that the inverse is being taken from the cache
message("getting inverse from the cache")
return(inv)
}
# If not, get the matrix...
mat <- x$get()
# compute the inverse of the matrix...
inv <- solve(mat, ...)
# set the computed inverse in the cache...
x$setInverse(inv)
# and return the computed inverse
inv
}
setwd("~/Desktop/Dropbox/DataScience/02rProgramming/Assignments/hw2/ProgrammingAssignment2")
source("cachematrix.R")
size <- 1000 # size of the matrix edge, don't make this too big
mymatrix <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix.inverse <- solve(mymatrix)
special.matrix   <- makeCacheMatrix(mymatrix)
special.solved.1 <- cacheSolve(special.matrix)
special.solved.2 <- cacheSolve(special.matrix)
identical(mymatrix.inverse, special.solved.1) & identical(mymatrix.inverse, special.solved.2)
